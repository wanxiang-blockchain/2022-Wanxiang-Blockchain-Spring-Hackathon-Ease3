[{"hash":"7168c658c6e93e7fe09dffae433ed868","info":{"id":"166","name":"wallet monitor@0x03ae > 0.01 MOVR","trigger_hash":"7168c658c6e93e7fe09dffae433ed868","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":3,"created_address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","created_time":"2022-04-23T12:20:12.210Z","last_updated_time":"2022-04-23T12:20:12.252Z","user_id":"3"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address && rule_param.amount_threshold ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"bad6f86de44780fae72aef4dce880f5d","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","address":"0x03aeA3108203781407b1D9b8f85b9A3Ab8D39483","compare":">=","direction":"all"}},"notify_channels":[{"id":"161","channel_type":"webhook","target":"http://16.163.5.216:40000/api/v1/webhook","enable":true,"channel_hash":"4560350c2cca77a8dc45e46be81d919a"},{"id":"162","channel_type":"email","target":{"email":"byj626680108@gmail.com"},"enable":true,"channel_hash":"6b5ae01a70c603b9a479f9f79608614d"},{"id":"163","channel_type":"telegram","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223"},"enable":true,"channel_hash":"04a144392c61ec84e93dc6f34d333db3"}],"build_time":"2022-04-23T12:20:12.269Z"},{"hash":"1996b4c47ceb4f08b944a0241e85492b","info":{"id":"167","name":"wallet monitor@0xD57e > 0.01 MOVR","trigger_hash":"1996b4c47ceb4f08b944a0241e85492b","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":3,"created_address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","created_time":"2022-04-23T12:20:35.637Z","last_updated_time":"2022-04-23T12:20:35.672Z","user_id":"3"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address && rule_param.amount_threshold ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"bad6f86de44780fae72aef4dce880f5d","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","address":"0xD57e28773c92E6fB9D9Fb164889886cd360074BE","compare":">=","direction":"all"}},"notify_channels":[{"id":"164","channel_type":"webhook","target":"http://16.163.5.216:40000/api/v1/webhook","enable":true,"channel_hash":"4560350c2cca77a8dc45e46be81d919a"},{"id":"165","channel_type":"email","target":{"email":"byj626680108@gmail.com"},"enable":true,"channel_hash":"6b5ae01a70c603b9a479f9f79608614d"},{"id":"166","channel_type":"telegram","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223"},"enable":true,"channel_hash":"04a144392c61ec84e93dc6f34d333db3"}],"build_time":"2022-04-23T12:20:35.695Z"},{"hash":"8c08ad61f250427f3b7ec122ad468379","info":{"id":"168","name":"wallet monitor@0xCB4C > 0.01 MOVR","trigger_hash":"8c08ad61f250427f3b7ec122ad468379","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":3,"created_address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","created_time":"2022-04-23T12:23:04.075Z","last_updated_time":"2022-04-23T12:23:04.102Z","user_id":"3"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address && rule_param.amount_threshold ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"bad6f86de44780fae72aef4dce880f5d","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","address":"0xCB4C43154353261fb8429533d2E055Be24830B8F","compare":">=","direction":"all"}},"notify_channels":[{"id":"167","channel_type":"webhook","target":"http://16.163.5.216:40000/api/v1/webhook","enable":true,"channel_hash":"4560350c2cca77a8dc45e46be81d919a"},{"id":"168","channel_type":"email","target":{"email":"byj626680108@gmail.com"},"enable":true,"channel_hash":"6b5ae01a70c603b9a479f9f79608614d"},{"id":"169","channel_type":"telegram","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223"},"enable":true,"channel_hash":"04a144392c61ec84e93dc6f34d333db3"}],"build_time":"2022-04-23T12:23:04.113Z"},{"hash":"6971624f694fcda552ebcefcb436826c","info":{"id":"171","name":"Anyswap USDC swapout > 100","trigger_hash":"6971624f694fcda552ebcefcb436826c","trigger_type":"anyswap","chain":"moonriver","status":"Draft","created_user_id":3,"created_address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","created_time":"2022-04-23T12:43:54.720Z","last_updated_time":"2022-04-23T12:43:54.767Z","user_id":"3"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.contract_address && rule_param.amount_threshold ) {        \n                let extrinsic = arg.data[0];\n                let name=extrinsic.name; \n                if(name!='ethereum.transact'){\n                    return { matched: false , result :{msg:'not extrinsic: ethereum.transact'} };\n                }\n                let GOD_ADDRESS='0x0000000000000000000000000000000000000000000000000000000000000000';\n                let TRANSFER_METHOD_HASH='0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'.toLowerCase();\n\n                let target_contract_address = rule_param.contract_address.toLowerCase();\n                let target_direction = rule_param.direction.toLowerCase();\n                let target_compare = rule_param.compare;\n                let target_address = (rule_param.address || '').toLowerCase();\n\n                let events = arg.data[1];\n                if(events){\n                    for (const evt of events) {\n                        \n                        //special contract_address\n                        if(!evt.evm_contract_address || evt.evm_contract_address.toLowerCase() != target_contract_address ){\n                            continue;\n                        }\n                        //special method: transfer\n                        if(!evt.evm_method_hash || evt.evm_method_hash.toLowerCase() != TRANSFER_METHOD_HASH ){\n                            continue;\n                        }\n\n                        let matched_direction = '';\n                        let wallet_address='';\n                        let evt_data = JSON.parse(evt.data)[0];\n                        let address_from = evt_data.topics[1];\n                        let address_to = evt_data.topics[2];\n                        if( address_from == GOD_ADDRESS ){\n                            matched_direction= 'swapin'; \n                            wallet_address='0x'+ address_to.substring(address_to.length - 40).toLowerCase();\n                        }\n                        if( address_to == GOD_ADDRESS ){\n                            matched_direction= 'swapout';\n                            wallet_address='0x'+ address_from.substring(address_from.length - 40).toLowerCase();\n                        }\n                        if( target_direction && matched_direction != target_direction ){\n                            return { matched: false , result :{msg: 'direction not match' } };\n                        }                         \n                        if( target_address && target_address != wallet_address ){\n                            return { matched: false , result :{msg: 'address not match' } };\n                        } \n\n                        let swap_amount = Number(evt_data.data);  \n                        let amount_threshold = Number(rule_param.amount_threshold);\n                        if( target_compare == '>=' && swap_amount >= amount_threshold ){\n                            matched = true;\n                        }\n                        if( target_compare == '<=' && swap_amount <= amount_threshold ){\n                            matched = true;\n                        }                     \n                        if( matched ){  \n                            result = {\n                                chain: arg.chain,\n                                blockNumber: extrinsic.block_number,                           \n                                timestamp: extrinsic.timestamp, \n                                address: wallet_address,\n                                symbol: rule_param.symbol,\n                                contract_address: target_contract_address,\n                                direction: matched_direction,\n                                amount: swap_amount                                \n                            };\n                            let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                            if( findTX ){\n                                // console.log(findTX);\n                                result.tx = JSON.parse(findTX.data)[2];\n                            }\n                        } \n                        \n                        if(matched == true ){\n                            break;\n                        }\n                    }\n                } \n                \n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"75c7864900e3ab4ad8888194470521b0","worker":"extrinsic","trigger_type":"anyswap","trigger_parameter":{"contract_address_name":"Anyswap-USD Coin (USDC)","contract_address":"0xe3f5a90f9cb311505cd691a46596599aa1a0ad7d","direction":"swapout","symbol":"USDC","decimals":6,"amount_threshold":"100000000","address":"","compare":">="}},"notify_channels":[{"id":"176","channel_type":"webhook","target":"http://16.163.5.216:40000/api/v1/webhook","enable":true,"channel_hash":"4560350c2cca77a8dc45e46be81d919a"},{"id":"177","channel_type":"email","target":{"email":"byj626680108@gmail.com"},"enable":true,"channel_hash":"6b5ae01a70c603b9a479f9f79608614d"},{"id":"178","channel_type":"telegram","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223"},"enable":true,"channel_hash":"04a144392c61ec84e93dc6f34d333db3"}],"build_time":"2022-04-23T12:43:54.802Z"},{"hash":"0e1aab726db59611dbea205f6982ffd1","info":{"id":0,"name":"wallet monitor@0xD57e > 0.01 MOVR =》moonpush-tg","trigger_type":"wallet_monitor","chain":"moonriver","user_id":0},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"adb47c754d58a90ef59c4fd393db0ceb","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","address":"0xD57e28773c92E6fB9D9Fb164889886cd360074BE","compare":">=","direction":"all"}},"notify_channels":[{"id":"181","channel_type":"telegram","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223"},"enable":true}],"build_time":"2022-04-24T08:44:14.574Z"},{"hash":"4a996dbbc0b7a3a6071456d55cb6c8a0","info":{"id":"165","name":"wallet monitor@0x071 > 0.01 MOVR","trigger_hash":"4a996dbbc0b7a3a6071456d55cb6c8a0","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":3,"created_address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","created_time":"2022-04-23T12:12:17.542Z","last_updated_time":"2022-04-24T08:48:01.976Z","user_id":"3"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address && rule_param.amount_threshold ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"bad6f86de44780fae72aef4dce880f5d","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","compare":">=","direction":"all"}},"notify_channels":[{"id":"158","channel_type":"webhook","target":"http://16.163.5.216:40000/api/v1/webhook","enable":true,"channel_hash":"4560350c2cca77a8dc45e46be81d919a"},{"id":"159","channel_type":"email","target":{"email":"byj626680108@gmail.com"},"enable":true,"channel_hash":"6b5ae01a70c603b9a479f9f79608614d"},{"id":"160","channel_type":"telegram","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223"},"enable":true,"channel_hash":"04a144392c61ec84e93dc6f34d333db3"}],"build_time":"2022-04-24T08:48:24.229Z"},{"hash":"44f28b5ab4f308c19063fa4b9ad2e9ba","info":{"id":"210","name":"Gas Burnt_2022-04-28","trigger_hash":"44f28b5ab4f308c19063fa4b9ad2e9ba","trigger_type":"gas","chain":"moonriver","status":"Draft","created_user_id":8,"created_address":"0x7126EA669654fBB335520Fc4EfeC840D85956102","created_time":"2022-04-28T05:58:56.542Z","last_updated_time":"2022-04-28T05:58:56.560Z","user_id":"8"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            //console.log(\"block \", arg);        \n            let matched = false;\n            let result = {};\n            if (arg.data && arg.data.length >= 2) {        \n                let blockFee = arg.data[1];\n                if (blockFee && blockFee.fees) {\n                    let fees = Number(blockFee.fees);\n                    let threshold = Number(rule_param.amount_threshold);\n                    \n                    if(rule_param.compare == '>=' && fees >= threshold ){\n                        matched = true;\n                    }\n                    if(rule_param.compare == '<=' && fees <= threshold ){\n                        matched = true;\n                    }\n                    if ( matched ) {                        \n                        result = {\n                            blockNumber: blockFee.blockNumber,\n                            chain: blockFee.chain,\n                            timestamp: blockFee.timestamp,\n                            fees: fees\n                        }\n                    }\n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"b33bf2a0691fc6d3f4d6e21ef325bc91","worker":"block","trigger_type":"gas","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"0","compare":">="}},"notify_channels":[{"id":"238","channel_type":"email","target":{"email":"1234","format_subject":"放","format_content":"按个"},"enable":true,"channel_hash":"1fe3e65a0b7bce0c4070b1042ba1cfad"}],"build_time":"2022-04-28T05:58:56.574Z"},{"hash":"4d2f5b4e76cda6ad4516b6ed1db8f385","info":{"id":"214","name":"Gas Burnt_2022-04-28","trigger_hash":"4d2f5b4e76cda6ad4516b6ed1db8f385","trigger_type":"gas","chain":"moonriver","status":"Draft","created_user_id":7,"created_address":"0x90A0a012034172dC2a10b01D96FF58F69720F561","created_time":"2022-04-28T06:54:27.809Z","last_updated_time":"2022-04-28T06:54:27.835Z","user_id":"7"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            //console.log(\"block \", arg);        \n            let matched = false;\n            let result = {};\n            if (arg.data && arg.data.length >= 2) {        \n                let blockFee = arg.data[1];\n                if (blockFee && blockFee.fees) {\n                    let fees = Number(blockFee.fees);\n                    let threshold = Number(rule_param.amount_threshold);\n                    \n                    if(rule_param.compare == '>=' && fees >= threshold ){\n                        matched = true;\n                    }\n                    if(rule_param.compare == '<=' && fees <= threshold ){\n                        matched = true;\n                    }\n                    if ( matched ) {                        \n                        result = {\n                            blockNumber: blockFee.blockNumber,\n                            chain: blockFee.chain,\n                            timestamp: blockFee.timestamp,\n                            fees: fees\n                        }\n                    }\n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"b33bf2a0691fc6d3f4d6e21ef325bc91","worker":"block","trigger_type":"gas","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"0","compare":">="}},"notify_channels":[{"id":"243","channel_type":"telegram","target":{"bot_token":"","chat_id":"","parse_mode":"HTML","format_text":""},"enable":true,"channel_hash":"8e6d5e4059d2eb6bdbdce93c6765a4c7"},{"id":"244","channel_type":"webhook","target":"","enable":true,"channel_hash":"c35c55060b1eb3f964301a891df13724"}],"build_time":"2022-04-28T06:54:27.847Z"},{"hash":"e01a4f95752e24e6d351fd6b196ccf33","info":{"id":"218","name":"Wallet Monitor_2022-04-28","trigger_hash":"e01a4f95752e24e6d351fd6b196ccf33","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":9,"created_address":"0xf38756286C362317A97DcD9ca141f1398627b68b","created_time":"2022-04-28T07:18:11.864Z","last_updated_time":"2022-04-28T07:18:11.885Z","user_id":"9"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"adb47c754d58a90ef59c4fd393db0ceb","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","compare":">=","direction":"send","address":"0xf38756286C362317A97DcD9ca141f1398627b68b"}},"notify_channels":[{"id":"250","channel_type":"telegram","target":{"bot_token":"5375570010:AAEQ2RQuHnj1l9Fk9V3xlf_92y605RaIEJg","chat_id":"-721649823","parse_mode":"HTML","format_text":""},"enable":true,"channel_hash":"4636761dcccdf5bb85e4cdca6710cec0"}],"build_time":"2022-04-28T07:18:11.897Z"},{"hash":"3b358326c3183ec08af76ae6b23f5180","info":{"id":"219","name":"Wallet Monitor_2022-04-28","trigger_hash":"3b358326c3183ec08af76ae6b23f5180","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":9,"created_address":"0xf38756286C362317A97DcD9ca141f1398627b68b","created_time":"2022-04-28T07:19:54.719Z","last_updated_time":"2022-04-28T07:19:54.769Z","user_id":"9"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"adb47c754d58a90ef59c4fd393db0ceb","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","compare":">=","direction":"receive","address":"0xf38756286C362317A97DcD9ca141f1398627b68b"}},"notify_channels":[{"id":"252","channel_type":"email","target":{"email":"melz@litentry.com","format_subject":"","format_content":""},"enable":true,"channel_hash":"b78c8956f0399d5c786cf220ec71c529"},{"id":"253","channel_type":"telegram","target":{"bot_token":"5375570010:AAEQ2RQuHnj1l9Fk9V3xlf_92y605RaIEJg","chat_id":"-721649823","parse_mode":"HTML","format_text":""},"enable":true,"channel_hash":"4636761dcccdf5bb85e4cdca6710cec0"}],"build_time":"2022-04-28T07:19:54.787Z"},{"hash":"705a0a5c652f760c9ed9794b3bbdf67c","info":{"id":"220","name":"Wallet Monitor_2022-04-28","trigger_hash":"705a0a5c652f760c9ed9794b3bbdf67c","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":9,"created_address":"0xf38756286C362317A97DcD9ca141f1398627b68b","created_time":"2022-04-28T07:53:12.382Z","last_updated_time":"2022-04-28T07:53:12.414Z","user_id":"9"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"adb47c754d58a90ef59c4fd393db0ceb","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","compare":">=","direction":"send","address":"0xf38756286C362317A97DcD9ca141f1398627b68b"}},"notify_channels":[{"id":"254","channel_type":"email","target":{"email":"melz@litentry.com","format_subject":"","format_content":""},"enable":true,"channel_hash":"b78c8956f0399d5c786cf220ec71c529"},{"id":"255","channel_type":"telegram","target":{"bot_token":"5375570010:AAEQ2RQuHnj1l9Fk9V3xlf_92y605RaIEJg","chat_id":"-721649823","parse_mode":"HTML","format_text":""},"enable":true,"channel_hash":"4636761dcccdf5bb85e4cdca6710cec0"}],"build_time":"2022-04-28T07:53:12.436Z"},{"hash":"2d46e67d9a5e426d1c3f239b80e544a6","info":{"id":"221","name":"Wallet Monitor_2022-04-28","trigger_hash":"2d46e67d9a5e426d1c3f239b80e544a6","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":13,"created_address":"0x2f81cAa4Daf0474d75E6DDac2e8C76d5009FEAFF","created_time":"2022-04-28T13:48:05.184Z","last_updated_time":"2022-04-28T13:48:05.202Z","user_id":"13"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"adb47c754d58a90ef59c4fd393db0ceb","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"0","compare":">=","direction":"send","address":""}},"notify_channels":[{"id":"256","channel_type":"email","target":{"email":"guoyy814@hotmail.com","format_subject":"on [moonriver], when [wallet address] [send] [ >=] [100] [MOVR] ","format_content":""},"enable":true,"channel_hash":"8ce9288ce9b41525be662c04189a67fe"}],"build_time":"2022-04-28T14:03:14.476Z"},{"hash":"30020076f51f7273c5cb2c75257bba3f","info":{"id":"227","name":"Gas Burnt_2022-04-28","trigger_hash":"30020076f51f7273c5cb2c75257bba3f","trigger_type":"gas","chain":"moonriver","status":"Draft","created_user_id":8,"created_address":"0x7126EA669654fBB335520Fc4EfeC840D85956102","created_time":"2022-04-28T14:48:38.550Z","last_updated_time":"2022-04-28T14:48:38.576Z","user_id":"8"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            //console.log(\"block \", arg);        \n            let matched = false;\n            let result = {};\n            if (arg.data && arg.data.length >= 2) {        \n                let blockFee = arg.data[1];\n                if (blockFee && blockFee.fees) {\n                    let fees = Number(blockFee.fees);\n                    let threshold = Number(rule_param.amount_threshold);\n                    \n                    if(rule_param.compare == '>=' && fees >= threshold ){\n                        matched = true;\n                    }\n                    if(rule_param.compare == '<=' && fees <= threshold ){\n                        matched = true;\n                    }\n                    if ( matched ) {                        \n                        result = {\n                            blockNumber: blockFee.blockNumber,\n                            chain: blockFee.chain,\n                            timestamp: blockFee.timestamp,\n                            fees: fees\n                        }\n                    }\n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"b33bf2a0691fc6d3f4d6e21ef325bc91","worker":"block","trigger_type":"gas","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"0","compare":">="}},"notify_channels":[{"id":"261","channel_type":"email","target":{"email":"1213","format_subject":"1334","format_content":"1313"},"enable":true,"channel_hash":"f50f46dce6e913320d8240c8c23ffea0"}],"build_time":"2022-04-28T14:48:38.591Z"},{"hash":"526bb98e8916b71b417d4eccfc11ade2","info":{"id":"204","name":"hao's wallet","trigger_hash":"526bb98e8916b71b417d4eccfc11ade2","trigger_type":"wallet_monitor","chain":"moonriver","status":"Draft","created_user_id":5,"created_address":"0xD57e28773c92E6fB9D9Fb164889886cd360074BE","created_time":"2022-04-28T03:09:17.611Z","last_updated_time":"2022-04-29T01:38:01.090Z","user_id":"5"},"execution":{"script":"module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.address ) {        \n                let extrinsic = arg.data[0]; \n                let section=extrinsic.section;\n                let method=extrinsic.method;\n                let events = arg.data[1];\n                \n                let from = '';\n                let to = '';\n                let amount = 0;\n                let matched_direction = '';\n                let target_direction = rule_param.direction;\n                let target_compare = rule_param.compare;\n                let target_address = rule_param.address.toLowerCase();\n\n                //transfer through parachain\n                if (section == 'balances' && method.indexOf('transfer') > -1) {\n                    let signer=extrinsic.signer;                                       \n                    let extrinsic_args=JSON.parse(extrinsic.args);\n\n                    //signer or extrinsic_args[0]  ==> watched address\n                    //extrinsic_args[1]  ==> token amount\n                    \n                    if(signer)  { from = signer.toLowerCase(); }\n                    if(extrinsic_args[0]) { to = extrinsic_args[0].toLowerCase(); }  \n                    // console.log(from,to);\n                   \n                    if(from == target_address){\n                        matched_direction='send';                        \n                    }\n                    else if(to == target_address){\n                        matched_direction='receive'; \n                    }\n\n                    if( target_direction=='all' || target_direction === matched_direction ){\n                        //keep matched_direction\n                    }else{\n                        matched_direction = '';\n                    }\n                    if(matched_direction){\n                        amount = Number(extrinsic_args[1]); \n                    } \n                }\n\n                //transfer through evm\n                if (section == 'ethereum' && method == 'transact') {\n                    \n                    if(events){\n                        for (const evt of events) {\n                            if(evt.name != 'balances.Transfer'){\n                                continue;\n                            }\n                            let evt_data = JSON.parse(evt.data);\n                            from = evt_data[0].toLowerCase();\n                            to = evt_data[1].toLowerCase();\n                            amount = Number(evt_data[2]);\n\n                            if(from == target_address){\n                                matched_direction='send';                        \n                            }\n                            else if(to == target_address){\n                                matched_direction='receive'; \n                            }\n        \n                            if( target_direction=='all' || target_direction === matched_direction ){\n                                //keep matched_direction\n                            }else{\n                                matched_direction = '';\n                            } \n                            if(matched_direction){\n                                break;                       \n                            } \n                        }\n                    } \n                }\n\n                if(matched_direction){\n                    let amount_threshold = Number(rule_param.amount_threshold);\n                    if(target_compare == '>=' && amount >= amount_threshold ){\n                        matched = true;\n                    }\n                    if(target_compare == '<=' && amount <= amount_threshold ){\n                        matched = true;\n                    }\n\n                    if( matched ){ \n                        result = {\n                            chain: arg.chain,\n                            blockNumber: extrinsic.block_number,                           \n                            timestamp: extrinsic.timestamp,\n                            from: from,\n                            to: to,\n                            direction: matched_direction,\n                            amount: amount\n                        };\n                        let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                        if( findTX ){\n                            // console.log(findTX);\n                            result.tx = JSON.parse(findTX.data)[2];\n                        }\n                    } \n                }\n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"adb47c754d58a90ef59c4fd393db0ceb","worker":"extrinsic","trigger_type":"wallet_monitor","trigger_parameter":{"symbol":"MOVR","decimals":18,"amount_threshold":"10000000000000000","compare":">=","direction":"send","address":"0x03aeA3108203781407b1D9b8f85b9A3Ab8D39483"}},"notify_channels":[{"id":"229","channel_type":"email","target":{"email":"hao.ding@litentry.com","format_subject":"transaction made!","format_content":""},"enable":true,"channel_hash":"ebe02328f248e027b519583edd912d13"},{"id":"230","channel_type":"telegram","target":{"bot_token":"5375570010:AAEQ2RQuHnj1l9Fk9V3xlf_92y605RaIEJg","chat_id":"-721649823","parse_mode":"HTML","format_text":""},"enable":true,"channel_hash":"2e030dd12f074312edee191b76d9d70f"}],"build_time":"2022-04-29T01:38:03.710Z"},{"hash":"e1081a01e14919d597446aed447a5e49","info":{"id":"230","name":"Solarbeam WMOVR-xcRMRK Swap xcRMRK > 10","trigger_hash":"e1081a01e14919d597446aed447a5e49","trigger_type":"dex","chain":"moonriver","status":"Draft","created_user_id":3,"created_address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","created_time":"2022-04-30T13:09:22.707Z","last_updated_time":"2022-04-30T13:36:14.870Z","user_id":"3"},"execution":{"script":"const BigNumber = require('bignumber.js');\n        function convertHex2DecimalBigNumber(hex , decimals ) {\n            return new BigNumber(hex).div('1e' + decimals);\n        }\n\n        module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.dex_pair_contract_address && rule_param.watched_topic ) {        \n                let extrinsic = arg.data[0];\n                let name=extrinsic.name; \n                if(name!='ethereum.transact'){\n                    return { matched: false , result :{msg:'not extrinsic: ethereum.transact'} };\n                }\n                let topics = {\n                    mint: '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'.toLowerCase(),\n                    burn: '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496'.toLowerCase(),\n                    swap: '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822'.toLowerCase()\n                }\n                let DATA_ITEM_LENGTH = 64;\n\n                let target_contract_address = rule_param.dex_pair_contract_address.toLowerCase();\n                let target_topic = rule_param.watched_topic.toLowerCase();\n                let target_topic_hash = topics[target_topic];                 \n                let target_token_index = rule_param.watched_token_index;                \n                let target_compare = rule_param.compare;\n                \n                let events = arg.data[1];\n                if(events){\n                    for (const evt of events) {                        \n                        //special contract_address\n                        if(!evt.evm_contract_address || evt.evm_contract_address.toLowerCase() != target_contract_address ){\n                            continue;\n                        }\n                        //special method matched the target_topic_hash \n                        if(!evt.evm_method_hash || evt.evm_method_hash.toLowerCase() != target_topic_hash ){\n                            continue;\n                        }\n\n                        //parse data\n                        let data = '';\n                        let d = JSON.parse(evt.data);\n                        if (d instanceof Array && d.length > 0) {\n                            data = d[0].data || '';\n                            data = data.replace('0x', '');\n                        }\n\n                        let token0_value='';\n                        let token1_value='';\n                        if( target_topic == 'mint' ||  target_topic == 'burn' ){\n                            let s_index=0,e_index=DATA_ITEM_LENGTH;\n                            token0_value = convertHex2DecimalBigNumber( ('0x' + data.substring(s_index, e_index)) , rule_param.token0_decimals ).toNumber();\n                            s_index = e_index;\n                            e_index += DATA_ITEM_LENGTH;\n                            token1_value =convertHex2DecimalBigNumber( ('0x' + data.substring(s_index, e_index)) , rule_param.token1_decimals ).toNumber();\n                        }\n                        \n                        if( target_topic == 'swap' ){\n                            let s_index=0,e_index=DATA_ITEM_LENGTH;\n                            let token0_in =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token0_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token1_in =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token1_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token0_out =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token0_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token1_out =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token1_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                                \n                            token0_value = token0_in.minus(token0_out).abs().toNumber();\n                            token1_value = token1_in.minus(token1_out).abs().toNumber();\n                        }\n\n                        console.log('token0_value:',token0_value,\",token1_value:\",token1_value);                       \n                        let swap_amount = 0; \n                        let decimals = 0;\n                        if(target_token_index == 0){\n                            swap_amount = token0_value;\n                            decimals= rule_param.token0_decimals;\n                        }else if(target_token_index == 1){\n                            swap_amount = token1_value;\n                            decimals= rule_param.token1_decimals;\n                        } \n  \n                        let amount_threshold = convertHex2DecimalBigNumber( rule_param.amount_threshold , decimals ).toNumber();\n                        console.log('amount_threshold:',amount_threshold); \n                        if( target_compare == '>=' && swap_amount >= amount_threshold ){\n                            matched = true;\n                        }\n                        if( target_compare == '<=' && swap_amount <= amount_threshold ){\n                            matched = true;\n                        }                     \n                        if( matched ){  \n                            result = {\n                                chain: arg.chain,\n                                blockNumber: extrinsic.block_number,                           \n                                timestamp: extrinsic.timestamp,                                   \n                                dex_pair_contract_address_name: rule_param.dex_pair_contract_address_name,\n                                dex_pair_contract_address: rule_param.dex_pair_contract_address,\n                                topic: target_topic,\n                                topic_hash: target_topic_hash,\n                                token0_value_formatted: token0_value,\n                                token0_symbol: rule_param.token0_symbol,\n                                token0_decimals: rule_param.token0_decimals,\n                                token1_value_formatted: token1_value,\n                                token1_symbol: rule_param.token1_symbol,\n                                token1_decimals: rule_param.token1_decimals,                         \n                            };\n                            let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                            if( findTX ){\n                                // console.log(findTX);\n                                result.from_address = JSON.parse(findTX.data)[0];\n                                result.tx = JSON.parse(findTX.data)[2];\n                            }\n                        } \n                        \n                        if(matched == true ){\n                            break;\n                        }\n                    }\n                } \n                \n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"c1a5108cfb914b773c143f16edcae2cb","worker":"extrinsic","trigger_type":"dex","trigger_parameter":{"dex_pair_contract_address_name":"Solarbeam WMOVR-xcRMRK","dex_pair_contract_address":"0xdfeefa89639125d22ca86e28ce87b164f41afae6","watched_topic":"swap","watched_token_index":"1","amount_threshold":"100000000000","compare":">=","token0_decimals":"18","token0_symbol":"WMOVR","token1_decimals":"10","token1_symbol":"xcRMRK"}},"notify_channels":[{"id":"264","channel_type":"webhook","target":"http://16.163.5.216:40000/api/v1/webhook","enable":true,"channel_hash":"4560350c2cca77a8dc45e46be81d919a"},{"id":"265","channel_type":"email","target":{"email":"byj626680108@gmail.com"},"enable":true,"channel_hash":"6b5ae01a70c603b9a479f9f79608614d"},{"id":"266","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223"},"enable":true,"channel_hash":"04a144392c61ec84e93dc6f34d333db3"}],"build_time":"2022-04-30T13:36:17.383Z"},{"hash":"c0603ea491bb678541460617d7b08320","info":{"id":"217","name":"DEX-Zenlink WMOVR-USDC swap WMOVR>1","trigger_hash":"c0603ea491bb678541460617d7b08320","trigger_type":"dex","chain":"moonriver","status":"Draft","created_user_id":3,"created_address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","created_time":"2022-04-28T07:15:30.618Z","last_updated_time":"2022-04-30T13:38:03.676Z","user_id":"3"},"execution":{"script":"const BigNumber = require('bignumber.js');\n        function convertHex2DecimalBigNumber(hex , decimals ) {\n            return new BigNumber(hex).div('1e' + decimals);\n        }\n\n        module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.dex_pair_contract_address && rule_param.watched_topic ) {        \n                let extrinsic = arg.data[0];\n                let name=extrinsic.name; \n                if(name!='ethereum.transact'){\n                    return { matched: false , result :{msg:'not extrinsic: ethereum.transact'} };\n                }\n                let topics = {\n                    mint: '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'.toLowerCase(),\n                    burn: '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496'.toLowerCase(),\n                    swap: '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822'.toLowerCase()\n                }\n                let DATA_ITEM_LENGTH = 64;\n\n                let target_contract_address = rule_param.dex_pair_contract_address.toLowerCase();\n                let target_topic = rule_param.watched_topic.toLowerCase();\n                let target_topic_hash = topics[target_topic];                 \n                let target_token_index = rule_param.watched_token_index;                \n                let target_compare = rule_param.compare;\n                \n                let events = arg.data[1];\n                if(events){\n                    for (const evt of events) {                        \n                        //special contract_address\n                        if(!evt.evm_contract_address || evt.evm_contract_address.toLowerCase() != target_contract_address ){\n                            continue;\n                        }\n                        //special method matched the target_topic_hash \n                        if(!evt.evm_method_hash || evt.evm_method_hash.toLowerCase() != target_topic_hash ){\n                            continue;\n                        }\n\n                        //parse data\n                        let data = '';\n                        let d = JSON.parse(evt.data);\n                        if (d instanceof Array && d.length > 0) {\n                            data = d[0].data || '';\n                            data = data.replace('0x', '');\n                        }\n\n                        let token0_value='';\n                        let token1_value='';\n                        if( target_topic == 'mint' ||  target_topic == 'burn' ){\n                            let s_index=0,e_index=DATA_ITEM_LENGTH;\n                            token0_value = convertHex2DecimalBigNumber( ('0x' + data.substring(s_index, e_index)) , rule_param.token0_decimals ).toNumber();\n                            s_index = e_index;\n                            e_index += DATA_ITEM_LENGTH;\n                            token1_value =convertHex2DecimalBigNumber( ('0x' + data.substring(s_index, e_index)) , rule_param.token1_decimals ).toNumber();\n                        }\n                        \n                        if( target_topic == 'swap' ){\n                            let s_index=0,e_index=DATA_ITEM_LENGTH;\n                            let token0_in =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token0_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token1_in =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token1_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token0_out =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token0_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token1_out =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token1_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                                \n                            token0_value = token0_in.minus(token0_out).abs().toNumber();\n                            token1_value = token1_in.minus(token1_out).abs().toNumber();\n                        }\n\n                        console.log('token0_value:',token0_value,\",token1_value:\",token1_value);                       \n                        let swap_amount = 0; \n                        let decimals = 0;\n                        if(target_token_index == 0){\n                            swap_amount = token0_value;\n                            decimals= rule_param.token0_decimals;\n                        }else if(target_token_index == 1){\n                            swap_amount = token1_value;\n                            decimals= rule_param.token1_decimals;\n                        } \n  \n                        let amount_threshold = convertHex2DecimalBigNumber( rule_param.amount_threshold , decimals ).toNumber();\n                        console.log('amount_threshold:',amount_threshold); \n                        if( target_compare == '>=' && swap_amount >= amount_threshold ){\n                            matched = true;\n                        }\n                        if( target_compare == '<=' && swap_amount <= amount_threshold ){\n                            matched = true;\n                        }                     \n                        if( matched ){  \n                            result = {\n                                chain: arg.chain,\n                                blockNumber: extrinsic.block_number,                           \n                                timestamp: extrinsic.timestamp,                                   \n                                dex_pair_contract_address_name: rule_param.dex_pair_contract_address_name,\n                                dex_pair_contract_address: rule_param.dex_pair_contract_address,\n                                topic: target_topic,\n                                topic_hash: target_topic_hash,\n                                token0_value_formatted: token0_value,\n                                token0_symbol: rule_param.token0_symbol,\n                                token0_decimals: rule_param.token0_decimals,\n                                token1_value_formatted: token1_value,\n                                token1_symbol: rule_param.token1_symbol,\n                                token1_decimals: rule_param.token1_decimals,                         \n                            };\n                            let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                            if( findTX ){\n                                // console.log(findTX);\n                                result.from_address = JSON.parse(findTX.data)[0];\n                                result.tx = JSON.parse(findTX.data)[2];\n                            }\n                        } \n                        \n                        if(matched == true ){\n                            break;\n                        }\n                    }\n                } \n                \n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"c1a5108cfb914b773c143f16edcae2cb","worker":"extrinsic","trigger_type":"dex","trigger_parameter":{"dex_pair_contract_address_name":"WMOVR-USDC","dex_pair_contract_address":"0x042e54b2b28265a7ce171f97391334bd47fe384c","watched_topic":"swap","watched_token_index":"0","amount_threshold":"1000000000000000000","compare":">=","token0_decimals":"18","token0_symbol":"WMOVR","token1_decimals":"6","token1_symbol":"USDC"}},"notify_channels":[{"id":"249","channel_type":"telegram","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223","parse_mode":"HTML","format_text":""},"enable":true,"channel_hash":"6a4c74b0a159031772f5a358d1a8d5d3"}],"build_time":"2022-04-30T13:38:20.728Z"},{"hash":"a322983640a4975b1453599adbcc2de2","info":{"id":"229","name":"Watch Solarbeam WMOVR-USDC swap WMOVR>10","trigger_hash":"a322983640a4975b1453599adbcc2de2","trigger_type":"dex","chain":"moonriver","status":"Draft","created_user_id":3,"created_address":"0x071d63b945cfDaec3b063be9096f42799B7E54D3","created_time":"2022-04-30T13:03:04.179Z","last_updated_time":"2022-04-30T13:09:40.864Z","user_id":"3"},"execution":{"script":"const BigNumber = require('bignumber.js');\n        function convertHex2DecimalBigNumber(hex , decimals ) {\n            return new BigNumber(hex).div('1e' + decimals);\n        }\n\n        module.exports = function (arg, rule_param) {\n            // console.log(\"extrinsic:\", arg,',rule_param:',rule_param);        \n            let matched = false;\n            let result = {};\n            if (arg.data && rule_param.dex_pair_contract_address && rule_param.watched_topic ) {        \n                let extrinsic = arg.data[0];\n                let name=extrinsic.name; \n                if(name!='ethereum.transact'){\n                    return { matched: false , result :{msg:'not extrinsic: ethereum.transact'} };\n                }\n                let topics = {\n                    mint: '0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f'.toLowerCase(),\n                    burn: '0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496'.toLowerCase(),\n                    swap: '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822'.toLowerCase()\n                }\n                let DATA_ITEM_LENGTH = 64;\n\n                let target_contract_address = rule_param.dex_pair_contract_address.toLowerCase();\n                let target_topic = rule_param.watched_topic.toLowerCase();\n                let target_topic_hash = topics[target_topic];                 \n                let target_token_index = rule_param.watched_token_index;                \n                let target_compare = rule_param.compare;\n                \n                let events = arg.data[1];\n                if(events){\n                    for (const evt of events) {                        \n                        //special contract_address\n                        if(!evt.evm_contract_address || evt.evm_contract_address.toLowerCase() != target_contract_address ){\n                            continue;\n                        }\n                        //special method matched the target_topic_hash \n                        if(!evt.evm_method_hash || evt.evm_method_hash.toLowerCase() != target_topic_hash ){\n                            continue;\n                        }\n\n                        //parse data\n                        let data = '';\n                        let d = JSON.parse(evt.data);\n                        if (d instanceof Array && d.length > 0) {\n                            data = d[0].data || '';\n                            data = data.replace('0x', '');\n                        }\n\n                        let token0_value='';\n                        let token1_value='';\n                        if( target_topic == 'mint' ||  target_topic == 'burn' ){\n                            let s_index=0,e_index=DATA_ITEM_LENGTH;\n                            token0_value = convertHex2DecimalBigNumber( ('0x' + data.substring(s_index, e_index)) , rule_param.token0_decimals ).toNumber();\n                            s_index = e_index;\n                            e_index += DATA_ITEM_LENGTH;\n                            token1_value =convertHex2DecimalBigNumber( ('0x' + data.substring(s_index, e_index)) , rule_param.token1_decimals ).toNumber();\n                        }\n                        \n                        if( target_topic == 'swap' ){\n                            let s_index=0,e_index=DATA_ITEM_LENGTH;\n                            let token0_in =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token0_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token1_in =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token1_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token0_out =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token0_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                            let token1_out =convertHex2DecimalBigNumber(  ('0x' + data.substring(s_index, e_index)), rule_param.token1_decimals );\n                            s_index = e_index; e_index += DATA_ITEM_LENGTH;\n                                \n                            token0_value = token0_in.minus(token0_out).abs().toNumber();\n                            token1_value = token1_in.minus(token1_out).abs().toNumber();\n                        }\n\n                        console.log('token0_value:',token0_value,\",token1_value:\",token1_value);                       \n                        let swap_amount = 0; \n                        let decimals = 0;\n                        if(target_token_index == 0){\n                            swap_amount = token0_value;\n                            decimals= rule_param.token0_decimals;\n                        }else if(target_token_index == 1){\n                            swap_amount = token1_value;\n                            decimals= rule_param.token1_decimals;\n                        } \n  \n                        let amount_threshold = convertHex2DecimalBigNumber( rule_param.amount_threshold , decimals ).toNumber();\n                        console.log('amount_threshold:',amount_threshold); \n                        if( target_compare == '>=' && swap_amount >= amount_threshold ){\n                            matched = true;\n                        }\n                        if( target_compare == '<=' && swap_amount <= amount_threshold ){\n                            matched = true;\n                        }                     \n                        if( matched ){  \n                            result = {\n                                chain: arg.chain,\n                                blockNumber: extrinsic.block_number,                           \n                                timestamp: extrinsic.timestamp,                                   \n                                dex_pair_contract_address_name: rule_param.dex_pair_contract_address_name,\n                                dex_pair_contract_address: rule_param.dex_pair_contract_address,\n                                topic: target_topic,\n                                topic_hash: target_topic_hash,\n                                token0_value_formatted: token0_value,\n                                token0_symbol: rule_param.token0_symbol,\n                                token0_decimals: rule_param.token0_decimals,\n                                token1_value_formatted: token1_value,\n                                token1_symbol: rule_param.token1_symbol,\n                                token1_decimals: rule_param.token1_decimals,                         \n                            };\n                            let findTX=events.find(t=>t.name.toLowerCase()== \"ethereum.Executed\".toLowerCase() );\n                            if( findTX ){\n                                // console.log(findTX);\n                                result.from_address = JSON.parse(findTX.data)[0];\n                                result.tx = JSON.parse(findTX.data)[2];\n                            }\n                        } \n                        \n                        if(matched == true ){\n                            break;\n                        }\n                    }\n                } \n                \n            }        \n            return {\n                matched: matched,\n                result: result\n            };\n        }","script_hash":"c1a5108cfb914b773c143f16edcae2cb","worker":"extrinsic","trigger_type":"dex","trigger_parameter":{"dex_pair_contract_address_name":"WMOVR-USDC","dex_pair_contract_address":"0xe537f70a8b62204832b8ba91940b77d3f79aeb81","watched_topic":"swap","watched_token_index":"0","amount_threshold":"10000000000000000000","compare":">=","token0_decimals":"18","token0_symbol":"WMOVR","token1_decimals":"6","token1_symbol":"USDC"}},"notify_channels":[{"id":"262","channel_type":"email","target":{"email":"byj626680108@gmail.com","format_subject":"","format_content":""},"enable":true,"channel_hash":"44678768055c2c609c3252c78ff02e3a"},{"id":"263","channel_type":"telegram","target":{"bot_token":"5377339602:AAElnu2lYmSRBMdwCo5bh7XU-G3c3UBkyA4","chat_id":"-769947223","parse_mode":"HTML","format_text":""},"enable":true,"channel_hash":"77216db3678aa44bb02cb3ef94c228e4"}],"build_time":"2022-04-30T13:38:23.739Z"}]